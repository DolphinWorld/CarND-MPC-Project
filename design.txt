This model uses CppAD::ipopt to find the minimum cost provided by FG_eval operator method. There are six states ( psi, v, cte, epsi, delta, and a), plus x and y positions. We then create cost function based on those six states. I mainly focus on cte and epsi, make sure it move to the correct reference trajectory. I also don't want the car to stop, so need to have cost function for v vs reference speed (60mph). But the value of speed difference could be too big because their value are large, so I set the coefficiency of speed to 0.005. 

There are two actuators, delta and a, which is tuned by IPOPT to make sure the cost are low. In my cost function, I set both values and their diffs with previous values to the cost function, to make the car move and turn smoothly. 

The actuators value set to fields of "steering_angle" and "throttle" in the json output. The steering angle divided by deg2rad(25), and turned to negative, because it is positive number when turn right, while normal angle is positive when turn anti-clockwise. I also set the mpc_x and mpc_y with the predicted position information.

Since I want to calculate the cte as soon as possible, I set dt to 0.1. Also, since we only use one or two points of predicted path, I set N to small number 25. I set the dt to 0.2, the car is almost out of track.

I use default 100 ms latency specified in main.cpp. 

